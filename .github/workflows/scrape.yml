name: Debugging Puppeteer Script with Anti-Bot Features

on:
  push:
  workflow_dispatch:
  schedule:
    - cron: '6,26,46 * * * *'

jobs:
  scheduled:
    runs-on: ubuntu-latest
    steps:
    - name: Check out repository
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 20

    - name: Install Dependencies
      run: |
        echo "Installing Puppeteer and required tools..."
        sudo apt-get update
        sudo apt-get install -y xvfb libnss3 libxss1 libasound2 libatk1.0-0 libgtk-3-0
        npm install puppeteer-extra puppeteer-extra-plugin-stealth puppeteer-extra-plugin-adblocker proxy-chain user-agents --force

    - name: Create fetch-site.mjs
      run: |
        echo "Creating fetch-site.mjs..."
        cat << 'EOF' > fetch-site.mjs
        import puppeteer from 'puppeteer-extra';
        import StealthPlugin from 'puppeteer-extra-plugin-stealth';
        import AdblockerPlugin from 'puppeteer-extra-plugin-adblocker';
        import UserAgent from 'user-agents';
        import fs from 'fs';

        // Use stealth and adblocker plugins to evade detection
        puppeteer.use(StealthPlugin());
        puppeteer.use(AdblockerPlugin());

        (async () => {
          const url = 'https://www.act.org.nz/';
          const outputDir = 'act.org.nz_site_tracking';

          // Proxy setup (replace with your proxy details)
          const proxyUrl = `http://54.67.125.45:3128`

          // Generate a random user agent for better evasion
          const userAgent = new UserAgent();

          // Ensure the output directory exists
          if (!fs.existsSync(outputDir)) {
            fs.mkdirSync(outputDir, { recursive: true });
            console.log(`Directory created: ${outputDir}`);
          }

          try {
            console.log('Launching browser with anti-bot features...');
            const browser = await puppeteer.launch({
              executablePath: '/usr/bin/chromium-browser', // Path to system-installed Chromium
              headless: true,
              args: [
                `--proxy-server=${proxyUrl}`,
                '--no-sandbox',
                '--disable-setuid-sandbox',
                '--disable-gpu',
                '--disable-dev-shm-usage',
                '--ignore-certificate-errors'
              ],
              ignoreHTTPSErrors: true,
            });

            const page = await browser.newPage();

            // Set user-agent and other headers to mimic a real browser
            await page.setUserAgent(userAgent.toString());
            console.log(`Using User Agent: ${userAgent.toString()}`);

            // Set additional headers
            await page.setExtraHTTPHeaders({
              'Accept-Language': 'en-US,en;q=0.9',
            });

            console.log(`Navigating to ${url}...`);
            await page.goto(url, { waitUntil: 'networkidle2', timeout: 60000 });

            // Wait for specific element to ensure the page loaded
            await page.waitForSelector('body');

            console.log('Page loaded. Taking a snapshot...');
            const content = await page.content();
            console.log('Captured Page Content:', content.substring(0, 500)); // Log the first 500 characters

            // Save content to a file
            const filePath = `${outputDir}/index.html`;
            try {
              fs.writeFileSync(filePath, content, 'utf-8');
              console.log(`Snapshot saved to ${filePath}`);
            } catch (error) {
              console.error('Error writing file:', error);
            }

            await browser.close();
          } catch (error) {
            console.error('Error occurred while fetching the page:', error);
          }
        })();
        EOF
        echo "fetch-site.mjs created successfully."

    - name: Verify fetch-site.mjs
      run: |
        echo "Verifying fetch-site.mjs exists..."
        ls -la
        cat fetch-site.mjs || echo "Error: fetch-site.mjs does not exist!"

    - name: Debug Environment
      run: |
        echo "Current working directory:"
        pwd
        echo "Node.js version:"
        node -v
        echo "Installed npm packages:"
        npm list --depth=0

    - name: Run Puppeteer with Anti-Bot Features
      run: |
        echo "Starting Xvfb..."
        Xvfb :99 -ac &
        export DISPLAY=:99
        echo "Running Puppeteer script with stealth features..."
        node fetch-site.mjs

    - name: Verify Output Files
      run: |
        echo "Checking act.org.nz_site_tracking directory..."
        ls -la act.org.nz_site_tracking || echo "Error: Output directory is missing!"
        echo "Verifying index.html..."
        if [ -f act.org.nz_site_tracking/index.html ]; then
          echo "index.html exists."
        else
          echo "Error: index.html is missing!"
        fi

    - name: Commit and Push Changes
      run: |
        echo "Configuring Git..."
        git config user.name "Automated"
        git config user.email "actions@users.noreply.github.com"
        echo "Staging files..."
        git add act.org.nz_site_tracking
        echo "Files staged for commit:"
        git diff --cached --name-only || echo "Error: No files staged."
        timestamp=$(date -u)
        echo "Attempting to commit..."
        git commit -m "Latest website snapshot: ${timestamp}" || echo "No changes to commit."
        echo "Attempting to push changes..."
        git push || echo "Error: Failed to push changes."
