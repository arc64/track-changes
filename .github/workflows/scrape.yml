# name: Debugging Ulixee Hero Script with Anti-Bot Features

# on:
#   push:
#   workflow_dispatch:
#   schedule:
#     - cron: '6,26,46 * * * *'

# jobs:
#   scheduled:
#     runs-on: ubuntu-latest
#     steps:
#     - name: Check out repository
#       uses: actions/checkout@v4

#     - name: Set up Node.js
#       uses: actions/setup-node@v3
#       with:
#         node-version: 18

#     - name: Install Dependencies
#       run: |
#         echo "Installing Ulixee Hero..."
#         npm install @ulixee/hero

#     - name: Create fetch_site.js
#       run: |
#         echo "Creating fetch_site.js..."
#         cat << 'EOF' > fetch_site.js
#         const Hero = require('@ulixee/hero');
#         const fs = require('fs');
#         const path = require('path');

#         const politicalPartiesNZ = {
#           ParliamentaryParties: [
#             { name: "New Zealand National Party", website: "https://www.national.org.nz" },
#             { name: "New Zealand Labour Party", website: "https://www.labour.org.nz" },
#             { name: "Green Party of Aotearoa New Zealand", website: "https://www.greens.org.nz" },
#             { name: "ACT New Zealand", website: "https://www.act.org.nz" },
#             { name: "New Zealand First Party", website: "https://www.nzfirst.nz" },
#             { name: "Te Pāti Māori", website: "https://www.maoriparty.org.nz" }
#           ],
#           NonParliamentaryRegisteredParties: [
#             { name: "Aotearoa Legalise Cannabis Party", website: "https://www.alcp.org.nz" },
#             { name: "Animal Justice Party Aotearoa New Zealand", website: "https://animaljustice.org.nz" },
#             { name: "Democratic Alliance", website: "https://democraticalliance.nz" },
#             { name: "Freedoms New Zealand", website: "https://www.freedomsnz.org.nz" }
#           ]
#         };

#         function saveHtmlContent(directory, partyName, content) {
#           const sanitizedName = partyName.replace(/[^a-zA-Z0-9]/g, '_');
#           const fileName = `${sanitizedName}.html`;
#           const filePath = path.join(directory, fileName);

#           fs.writeFileSync(filePath, content, 'utf8');
#           console.log(`Saved content for ${partyName} to ${filePath}`);
#         }

#         async function scrapeWebsite(hero, party) {
#           console.log(`Scraping ${party.name} (${party.website})...`);
#           try {
#             await hero.goto(party.website);
#             const htmlContent = await hero.document.documentElement.outerHTML;
#             return htmlContent;
#           } catch (err) {
#             console.error(`Failed to scrape ${party.website}:`, err);
#             return null;
#           }
#         }

#         async function main() {
#           const directory = 'political_parties_data';

#           if (!fs.existsSync(directory)) {
#             fs.mkdirSync(directory, { recursive: true });
#             console.log(`Directory created: ${directory}`);
#           }

#           const hero = new Hero();

#           for (const [category, parties] of Object.entries(politicalPartiesNZ)) {
#             console.log(`Scraping category: ${category}`);
#             for (const party of parties) {
#               const htmlContent = await scrapeWebsite(hero, party);
#               if (htmlContent) {
#                 saveHtmlContent(directory, party.name, htmlContent);
#               }
#             }
#           }

#           await hero.close();
#           console.log('Scraping completed.');
#         }

#         main().catch(err => {
#           console.error('An error occurred during scraping:', err);
#           process.exit(1);
#         });
#         EOF
#         echo "fetch_site.js created successfully."

#     - name: Verify fetch_site.js
#       run: |
#         echo "Verifying fetch_site.js exists..."
#         ls -la
#         cat fetch_site.js || echo "Error: fetch_site.js does not exist!"

#     - name: Run Ulixee Hero Script
#       run: |
#         echo "Running Ulixee Hero script..."
#         node fetch_site.js

#     - name: Verify Output Files
#       run: |
#         echo "Checking political_parties_data directory..."
#         ls -la political_parties_data || echo "Error: Output directory is missing!"
#         echo "Verifying .html files..."
#         if ls political_parties_data/*.html 1> /dev/null 2>&1; then
#           echo ".html files exist."
#         else
#           echo "Error: No HTML files generated!"
#         fi

#     - name: Commit and Push Changes
#       run: |
#         echo "Configuring Git..."
#         git config user.name "Automated"
#         git config user.email "actions@users.noreply.github.com"
#         echo "Staging files..."
#         git add political_parties_data
#         echo "Files staged for commit:"
#         git diff --cached --name-only || echo "Error: No files staged."
#         timestamp=$(date -u)
#         echo "Attempting to commit..."
#         git commit -m "Latest website snapshot: ${timestamp}" || echo "No changes to commit."
#         echo "Attempting to push changes..."
#         git push || echo "Error: Failed to push changes."
