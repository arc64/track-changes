name: Debugging Puppeteer Script with Anti-Bot Features

on:
  push:
  workflow_dispatch:
  schedule:
    - cron: '6,26,46 * * * *'

jobs:
  scheduled:
    runs-on: ubuntu-latest
    steps:
    - name: Check out repository
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 20

    - name: Install Dependencies
      run: |
        echo "Installing Puppeteer and required tools..."
        sudo apt-get update
        sudo apt-get install -y xvfb libnss3 libxss1 libasound2 libatk1.0-0 libgtk-3-0
        npm install puppeteer-extra puppeteer-extra-plugin-stealth puppeteer-extra-plugin-adblocker proxy-chain user-agents --force

    - name: Create fetch-site.mjs
      run: |
        echo "Creating fetch-site.mjs..."
        cat << 'EOF' > fetch-site.mjs
        import puppeteer from 'puppeteer-extra';
        import StealthPlugin from 'puppeteer-extra-plugin-stealth';
        import fs from 'fs';
        import path from 'path';

        puppeteer.use(StealthPlugin());

        const politicalPartiesNZ = {
          ParliamentaryParties: [
            {
              name: "New Zealand National Party",
              website: "https://www.national.org.nz"
            },
            {
              name: "New Zealand Labour Party",
              website: "https://www.labour.org.nz"
            },
            {
              name: "Green Party of Aotearoa New Zealand",
              website: "https://www.greens.org.nz"
            },
            {
              name: "ACT New Zealand",
              website: "https://www.act.org.nz"
            },
            {
              name: "New Zealand First Party",
              website: "https://www.nzfirst.nz"
            },
            {
              name: "Te Pāti Māori",
              website: "https://www.maoriparty.org.nz"
            }
          ],
          NonParliamentaryRegisteredParties: [
            {
              name: "Aotearoa Legalise Cannabis Party",
              website: "https://www.alcp.org.nz"
            },
            {
              name: "Animal Justice Party Aotearoa New Zealand",
              website: "https://animaljustice.org.nz"
            },
            {
              name: "Democratic Alliance",
              website: "https://democraticalliance.nz"
            },
            {
              name: "Freedoms New Zealand",
              website: "https://www.freedomsnz.org.nz"
            }
          ]
        };

        (async () => {
          const directory = 'political_parties_data';

          // Ensure the directory exists
          if (!fs.existsSync(directory)) {
            fs.mkdirSync(directory, { recursive: true });
            console.log(`Directory created: ${directory}`);
          }

          console.log('Launching Puppeteer...');
          const browser = await puppeteer.launch({
            headless: true,
            args: ['--no-sandbox', '--disable-setuid-sandbox'],
          });

          const scrapeWebsite = async (party) => {
            const page = await browser.newPage();
            console.log(`Scraping ${party.name} (${party.website})...`);

            try {
              // Visit the website
              await page.goto(party.website, { waitUntil: 'networkidle2', timeout: 60000 });

              // Extract page content
              const htmlContent = await page.content();
              const fileName = `${party.name.replace(/[^\w.-]+/g, '_')}.html`;
              const filePath = path.join(directory, fileName);

              // Save the HTML content to a file
              fs.writeFileSync(filePath, htmlContent);
              console.log(`Saved content for ${party.name} to ${filePath}`);

            } catch (err) {
              console.error(`Failed to scrape ${party.website}:`, err.message);
            } finally {
              await page.close();
            }
          };

          // Loop through all parties
          for (const category of Object.keys(politicalPartiesNZ)) {
            const parties = politicalPartiesNZ[category];
            console.log(`Scraping category: ${category}`);
            for (const party of parties) {
              await scrapeWebsite(party);
            }
          }

          console.log('Closing Puppeteer...');
          await browser.close();
          console.log('Puppeteer closed.');
        })();

        EOF
        echo "fetch-site.mjs created successfully."

    - name: Verify fetch-site.mjs
      run: |
        echo "Verifying fetch-site.mjs exists..."
        ls -la
        cat fetch-site.mjs || echo "Error: fetch-site.mjs does not exist!"

    - name: Debug Environment
      run: |
        echo "Current working directory:"
        pwd
        echo "Node.js version:"
        node -v
        echo "Installed npm packages:"
        npm list --depth=0

    - name: Run Puppeteer with Anti-Bot Features
      run: |
        echo "Starting Xvfb..."
        Xvfb :99 -ac &
        export DISPLAY=:99
        echo "Running Puppeteer script with stealth features..."
        node fetch-site.mjs

    - name: Verify Output Files
      run: |
        echo "Checking political_parties_data directory..."
        ls -la political_parties_data || echo "Error: Output directory is missing!"
        echo "Verifying index.html..."
        if [ -f political_parties_data/*.html ]; then
          echo ".html exists."
        else
          echo "Error: index.html is missing!"
        fi

    - name: Commit and Push Changes
      run: |
        echo "Configuring Git..."
        git config user.name "Automated"
        git config user.email "actions@users.noreply.github.com"
        echo "Staging files..."
        git add political_parties_data
        echo "Files staged for commit:"
        git diff --cached --name-only || echo "Error: No files staged."
        timestamp=$(date -u)
        echo "Attempting to commit..."
        git commit -m "Latest website snapshot: ${timestamp}" || echo "No changes to commit."
        echo "Attempting to push changes..."
        git push || echo "Error: Failed to push changes."
